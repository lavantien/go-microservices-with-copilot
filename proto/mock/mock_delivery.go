// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/delivery_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockDeliveryServiceClient is a mock of DeliveryServiceClient interface.
type MockDeliveryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceClientMockRecorder
}

// MockDeliveryServiceClientMockRecorder is the mock recorder for MockDeliveryServiceClient.
type MockDeliveryServiceClientMockRecorder struct {
	mock *MockDeliveryServiceClient
}

// NewMockDeliveryServiceClient creates a new mock instance.
func NewMockDeliveryServiceClient(ctrl *gomock.Controller) *MockDeliveryServiceClient {
	mock := &MockDeliveryServiceClient{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryServiceClient) EXPECT() *MockDeliveryServiceClientMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockDeliveryServiceClient) CreateDelivery(ctx context.Context, in *pb.CreateDeliveryRequest, opts ...grpc.CallOption) (*pb.CreateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDelivery", varargs...)
	ret0, _ := ret[0].(*pb.CreateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockDeliveryServiceClientMockRecorder) CreateDelivery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockDeliveryServiceClient)(nil).CreateDelivery), varargs...)
}

// DeleteDelivery mocks base method.
func (m *MockDeliveryServiceClient) DeleteDelivery(ctx context.Context, in *pb.DeleteDeliveryRequest, opts ...grpc.CallOption) (*pb.DeleteDeliveryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDelivery", varargs...)
	ret0, _ := ret[0].(*pb.DeleteDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDelivery indicates an expected call of DeleteDelivery.
func (mr *MockDeliveryServiceClientMockRecorder) DeleteDelivery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelivery", reflect.TypeOf((*MockDeliveryServiceClient)(nil).DeleteDelivery), varargs...)
}

// ListDeliveriesOfUser mocks base method.
func (m *MockDeliveryServiceClient) ListDeliveriesOfUser(ctx context.Context, in *pb.ListDeliveriesRequest, opts ...grpc.CallOption) (*pb.ListDeliveriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeliveriesOfUser", varargs...)
	ret0, _ := ret[0].(*pb.ListDeliveriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliveriesOfUser indicates an expected call of ListDeliveriesOfUser.
func (mr *MockDeliveryServiceClientMockRecorder) ListDeliveriesOfUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliveriesOfUser", reflect.TypeOf((*MockDeliveryServiceClient)(nil).ListDeliveriesOfUser), varargs...)
}

// ReadDelivery mocks base method.
func (m *MockDeliveryServiceClient) ReadDelivery(ctx context.Context, in *pb.ReadDeliveryRequest, opts ...grpc.CallOption) (*pb.ReadDeliveryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadDelivery", varargs...)
	ret0, _ := ret[0].(*pb.ReadDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDelivery indicates an expected call of ReadDelivery.
func (mr *MockDeliveryServiceClientMockRecorder) ReadDelivery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDelivery", reflect.TypeOf((*MockDeliveryServiceClient)(nil).ReadDelivery), varargs...)
}

// UpdateDelivery mocks base method.
func (m *MockDeliveryServiceClient) UpdateDelivery(ctx context.Context, in *pb.UpdateDeliveryRequest, opts ...grpc.CallOption) (*pb.UpdateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDelivery", varargs...)
	ret0, _ := ret[0].(*pb.UpdateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDelivery indicates an expected call of UpdateDelivery.
func (mr *MockDeliveryServiceClientMockRecorder) UpdateDelivery(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelivery", reflect.TypeOf((*MockDeliveryServiceClient)(nil).UpdateDelivery), varargs...)
}

// MockDeliveryServiceServer is a mock of DeliveryServiceServer interface.
type MockDeliveryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceServerMockRecorder
}

// MockDeliveryServiceServerMockRecorder is the mock recorder for MockDeliveryServiceServer.
type MockDeliveryServiceServerMockRecorder struct {
	mock *MockDeliveryServiceServer
}

// NewMockDeliveryServiceServer creates a new mock instance.
func NewMockDeliveryServiceServer(ctrl *gomock.Controller) *MockDeliveryServiceServer {
	mock := &MockDeliveryServiceServer{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryServiceServer) EXPECT() *MockDeliveryServiceServerMockRecorder {
	return m.recorder
}

// CreateDelivery mocks base method.
func (m *MockDeliveryServiceServer) CreateDelivery(arg0 context.Context, arg1 *pb.CreateDeliveryRequest) (*pb.CreateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockDeliveryServiceServerMockRecorder) CreateDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockDeliveryServiceServer)(nil).CreateDelivery), arg0, arg1)
}

// DeleteDelivery mocks base method.
func (m *MockDeliveryServiceServer) DeleteDelivery(arg0 context.Context, arg1 *pb.DeleteDeliveryRequest) (*pb.DeleteDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDelivery", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDelivery indicates an expected call of DeleteDelivery.
func (mr *MockDeliveryServiceServerMockRecorder) DeleteDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelivery", reflect.TypeOf((*MockDeliveryServiceServer)(nil).DeleteDelivery), arg0, arg1)
}

// ListDeliveriesOfUser mocks base method.
func (m *MockDeliveryServiceServer) ListDeliveriesOfUser(arg0 context.Context, arg1 *pb.ListDeliveriesRequest) (*pb.ListDeliveriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeliveriesOfUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListDeliveriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeliveriesOfUser indicates an expected call of ListDeliveriesOfUser.
func (mr *MockDeliveryServiceServerMockRecorder) ListDeliveriesOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeliveriesOfUser", reflect.TypeOf((*MockDeliveryServiceServer)(nil).ListDeliveriesOfUser), arg0, arg1)
}

// ReadDelivery mocks base method.
func (m *MockDeliveryServiceServer) ReadDelivery(arg0 context.Context, arg1 *pb.ReadDeliveryRequest) (*pb.ReadDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDelivery", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDelivery indicates an expected call of ReadDelivery.
func (mr *MockDeliveryServiceServerMockRecorder) ReadDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDelivery", reflect.TypeOf((*MockDeliveryServiceServer)(nil).ReadDelivery), arg0, arg1)
}

// UpdateDelivery mocks base method.
func (m *MockDeliveryServiceServer) UpdateDelivery(arg0 context.Context, arg1 *pb.UpdateDeliveryRequest) (*pb.UpdateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDelivery", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDelivery indicates an expected call of UpdateDelivery.
func (mr *MockDeliveryServiceServerMockRecorder) UpdateDelivery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDelivery", reflect.TypeOf((*MockDeliveryServiceServer)(nil).UpdateDelivery), arg0, arg1)
}

// mustEmbedUnimplementedDeliveryServiceServer mocks base method.
func (m *MockDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeliveryServiceServer")
}

// mustEmbedUnimplementedDeliveryServiceServer indicates an expected call of mustEmbedUnimplementedDeliveryServiceServer.
func (mr *MockDeliveryServiceServerMockRecorder) mustEmbedUnimplementedDeliveryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeliveryServiceServer", reflect.TypeOf((*MockDeliveryServiceServer)(nil).mustEmbedUnimplementedDeliveryServiceServer))
}

// MockUnsafeDeliveryServiceServer is a mock of UnsafeDeliveryServiceServer interface.
type MockUnsafeDeliveryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDeliveryServiceServerMockRecorder
}

// MockUnsafeDeliveryServiceServerMockRecorder is the mock recorder for MockUnsafeDeliveryServiceServer.
type MockUnsafeDeliveryServiceServerMockRecorder struct {
	mock *MockUnsafeDeliveryServiceServer
}

// NewMockUnsafeDeliveryServiceServer creates a new mock instance.
func NewMockUnsafeDeliveryServiceServer(ctrl *gomock.Controller) *MockUnsafeDeliveryServiceServer {
	mock := &MockUnsafeDeliveryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDeliveryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDeliveryServiceServer) EXPECT() *MockUnsafeDeliveryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDeliveryServiceServer mocks base method.
func (m *MockUnsafeDeliveryServiceServer) mustEmbedUnimplementedDeliveryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDeliveryServiceServer")
}

// mustEmbedUnimplementedDeliveryServiceServer indicates an expected call of mustEmbedUnimplementedDeliveryServiceServer.
func (mr *MockUnsafeDeliveryServiceServerMockRecorder) mustEmbedUnimplementedDeliveryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDeliveryServiceServer", reflect.TypeOf((*MockUnsafeDeliveryServiceServer)(nil).mustEmbedUnimplementedDeliveryServiceServer))
}
