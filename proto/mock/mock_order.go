// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/order_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockOrderServiceClient is a mock of OrderServiceClient interface.
type MockOrderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceClientMockRecorder
}

// MockOrderServiceClientMockRecorder is the mock recorder for MockOrderServiceClient.
type MockOrderServiceClientMockRecorder struct {
	mock *MockOrderServiceClient
}

// NewMockOrderServiceClient creates a new mock instance.
func NewMockOrderServiceClient(ctrl *gomock.Controller) *MockOrderServiceClient {
	mock := &MockOrderServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceClient) EXPECT() *MockOrderServiceClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceClient) CreateOrder(ctx context.Context, in *pb.CreateOrderRequest, opts ...grpc.CallOption) (*pb.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*pb.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceClientMockRecorder) CreateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).CreateOrder), varargs...)
}

// DeleteOrder mocks base method.
func (m *MockOrderServiceClient) DeleteOrder(ctx context.Context, in *pb.DeleteOrderRequest, opts ...grpc.CallOption) (*pb.DeleteOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrder", varargs...)
	ret0, _ := ret[0].(*pb.DeleteOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceClientMockRecorder) DeleteOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).DeleteOrder), varargs...)
}

// ListOrdersOfUser mocks base method.
func (m *MockOrderServiceClient) ListOrdersOfUser(ctx context.Context, in *pb.ListOrdersOfUserRequest, opts ...grpc.CallOption) (*pb.ListOrdersOfUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrdersOfUser", varargs...)
	ret0, _ := ret[0].(*pb.ListOrdersOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersOfUser indicates an expected call of ListOrdersOfUser.
func (mr *MockOrderServiceClientMockRecorder) ListOrdersOfUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersOfUser", reflect.TypeOf((*MockOrderServiceClient)(nil).ListOrdersOfUser), varargs...)
}

// ReadOrder mocks base method.
func (m *MockOrderServiceClient) ReadOrder(ctx context.Context, in *pb.ReadOrderRequest, opts ...grpc.CallOption) (*pb.ReadOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadOrder", varargs...)
	ret0, _ := ret[0].(*pb.ReadOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOrder indicates an expected call of ReadOrder.
func (mr *MockOrderServiceClientMockRecorder) ReadOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).ReadOrder), varargs...)
}

// UpdateOrder mocks base method.
func (m *MockOrderServiceClient) UpdateOrder(ctx context.Context, in *pb.UpdateOrderRequest, opts ...grpc.CallOption) (*pb.UpdateOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(*pb.UpdateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderServiceClientMockRecorder) UpdateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderServiceClient)(nil).UpdateOrder), varargs...)
}

// MockOrderServiceServer is a mock of OrderServiceServer interface.
type MockOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceServerMockRecorder
}

// MockOrderServiceServerMockRecorder is the mock recorder for MockOrderServiceServer.
type MockOrderServiceServerMockRecorder struct {
	mock *MockOrderServiceServer
}

// NewMockOrderServiceServer creates a new mock instance.
func NewMockOrderServiceServer(ctrl *gomock.Controller) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceServer) EXPECT() *MockOrderServiceServerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceServer) CreateOrder(arg0 context.Context, arg1 *pb.CreateOrderRequest) (*pb.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceServerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).CreateOrder), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockOrderServiceServer) DeleteOrder(arg0 context.Context, arg1 *pb.DeleteOrderRequest) (*pb.DeleteOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceServerMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).DeleteOrder), arg0, arg1)
}

// ListOrdersOfUser mocks base method.
func (m *MockOrderServiceServer) ListOrdersOfUser(arg0 context.Context, arg1 *pb.ListOrdersOfUserRequest) (*pb.ListOrdersOfUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrdersOfUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListOrdersOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrdersOfUser indicates an expected call of ListOrdersOfUser.
func (mr *MockOrderServiceServerMockRecorder) ListOrdersOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrdersOfUser", reflect.TypeOf((*MockOrderServiceServer)(nil).ListOrdersOfUser), arg0, arg1)
}

// ReadOrder mocks base method.
func (m *MockOrderServiceServer) ReadOrder(arg0 context.Context, arg1 *pb.ReadOrderRequest) (*pb.ReadOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOrder indicates an expected call of ReadOrder.
func (mr *MockOrderServiceServerMockRecorder) ReadOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).ReadOrder), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockOrderServiceServer) UpdateOrder(arg0 context.Context, arg1 *pb.UpdateOrderRequest) (*pb.UpdateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderServiceServerMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderServiceServer)(nil).UpdateOrder), arg0, arg1)
}

// mustEmbedUnimplementedOrderServiceServer mocks base method.
func (m *MockOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServiceServer")
}

// mustEmbedUnimplementedOrderServiceServer indicates an expected call of mustEmbedUnimplementedOrderServiceServer.
func (mr *MockOrderServiceServerMockRecorder) mustEmbedUnimplementedOrderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServiceServer", reflect.TypeOf((*MockOrderServiceServer)(nil).mustEmbedUnimplementedOrderServiceServer))
}

// MockUnsafeOrderServiceServer is a mock of UnsafeOrderServiceServer interface.
type MockUnsafeOrderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrderServiceServerMockRecorder
}

// MockUnsafeOrderServiceServerMockRecorder is the mock recorder for MockUnsafeOrderServiceServer.
type MockUnsafeOrderServiceServerMockRecorder struct {
	mock *MockUnsafeOrderServiceServer
}

// NewMockUnsafeOrderServiceServer creates a new mock instance.
func NewMockUnsafeOrderServiceServer(ctrl *gomock.Controller) *MockUnsafeOrderServiceServer {
	mock := &MockUnsafeOrderServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrderServiceServer) EXPECT() *MockUnsafeOrderServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrderServiceServer mocks base method.
func (m *MockUnsafeOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServiceServer")
}

// mustEmbedUnimplementedOrderServiceServer indicates an expected call of mustEmbedUnimplementedOrderServiceServer.
func (mr *MockUnsafeOrderServiceServerMockRecorder) mustEmbedUnimplementedOrderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServiceServer", reflect.TypeOf((*MockUnsafeOrderServiceServer)(nil).mustEmbedUnimplementedOrderServiceServer))
}
