// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/payment_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockPaymentServiceClient is a mock of PaymentServiceClient interface.
type MockPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientMockRecorder
}

// MockPaymentServiceClientMockRecorder is the mock recorder for MockPaymentServiceClient.
type MockPaymentServiceClientMockRecorder struct {
	mock *MockPaymentServiceClient
}

// NewMockPaymentServiceClient creates a new mock instance.
func NewMockPaymentServiceClient(ctrl *gomock.Controller) *MockPaymentServiceClient {
	mock := &MockPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClient) EXPECT() *MockPaymentServiceClientMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentServiceClient) CreatePayment(ctx context.Context, in *pb.CreatePaymentRequest, opts ...grpc.CallOption) (*pb.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePayment", varargs...)
	ret0, _ := ret[0].(*pb.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceClientMockRecorder) CreatePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).CreatePayment), varargs...)
}

// DeletePayment mocks base method.
func (m *MockPaymentServiceClient) DeletePayment(ctx context.Context, in *pb.DeletePaymentRequest, opts ...grpc.CallOption) (*pb.DeletePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePayment", varargs...)
	ret0, _ := ret[0].(*pb.DeletePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockPaymentServiceClientMockRecorder) DeletePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).DeletePayment), varargs...)
}

// ListPaymentsOfUser mocks base method.
func (m *MockPaymentServiceClient) ListPaymentsOfUser(ctx context.Context, in *pb.ListPaymentsOfUserRequest, opts ...grpc.CallOption) (*pb.ListPaymentsOfUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPaymentsOfUser", varargs...)
	ret0, _ := ret[0].(*pb.ListPaymentsOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentsOfUser indicates an expected call of ListPaymentsOfUser.
func (mr *MockPaymentServiceClientMockRecorder) ListPaymentsOfUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentsOfUser", reflect.TypeOf((*MockPaymentServiceClient)(nil).ListPaymentsOfUser), varargs...)
}

// ReadPayment mocks base method.
func (m *MockPaymentServiceClient) ReadPayment(ctx context.Context, in *pb.ReadPaymentRequest, opts ...grpc.CallOption) (*pb.ReadPaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadPayment", varargs...)
	ret0, _ := ret[0].(*pb.ReadPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPayment indicates an expected call of ReadPayment.
func (mr *MockPaymentServiceClientMockRecorder) ReadPayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).ReadPayment), varargs...)
}

// UpdatePayment mocks base method.
func (m *MockPaymentServiceClient) UpdatePayment(ctx context.Context, in *pb.UpdatePaymentRequest, opts ...grpc.CallOption) (*pb.UpdatePaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePayment", varargs...)
	ret0, _ := ret[0].(*pb.UpdatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockPaymentServiceClientMockRecorder) UpdatePayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockPaymentServiceClient)(nil).UpdatePayment), varargs...)
}

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentServiceServer) CreatePayment(arg0 context.Context, arg1 *pb.CreatePaymentRequest) (*pb.CreatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceServerMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).CreatePayment), arg0, arg1)
}

// DeletePayment mocks base method.
func (m *MockPaymentServiceServer) DeletePayment(arg0 context.Context, arg1 *pb.DeletePaymentRequest) (*pb.DeletePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeletePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockPaymentServiceServerMockRecorder) DeletePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).DeletePayment), arg0, arg1)
}

// ListPaymentsOfUser mocks base method.
func (m *MockPaymentServiceServer) ListPaymentsOfUser(arg0 context.Context, arg1 *pb.ListPaymentsOfUserRequest) (*pb.ListPaymentsOfUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentsOfUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListPaymentsOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentsOfUser indicates an expected call of ListPaymentsOfUser.
func (mr *MockPaymentServiceServerMockRecorder) ListPaymentsOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentsOfUser", reflect.TypeOf((*MockPaymentServiceServer)(nil).ListPaymentsOfUser), arg0, arg1)
}

// ReadPayment mocks base method.
func (m *MockPaymentServiceServer) ReadPayment(arg0 context.Context, arg1 *pb.ReadPaymentRequest) (*pb.ReadPaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPayment", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPayment indicates an expected call of ReadPayment.
func (mr *MockPaymentServiceServerMockRecorder) ReadPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).ReadPayment), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockPaymentServiceServer) UpdatePayment(arg0 context.Context, arg1 *pb.UpdatePaymentRequest) (*pb.UpdatePaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockPaymentServiceServerMockRecorder) UpdatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockPaymentServiceServer)(nil).UpdatePayment), arg0, arg1)
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockPaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockPaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}

// MockUnsafePaymentServiceServer is a mock of UnsafePaymentServiceServer interface.
type MockUnsafePaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePaymentServiceServerMockRecorder
}

// MockUnsafePaymentServiceServerMockRecorder is the mock recorder for MockUnsafePaymentServiceServer.
type MockUnsafePaymentServiceServerMockRecorder struct {
	mock *MockUnsafePaymentServiceServer
}

// NewMockUnsafePaymentServiceServer creates a new mock instance.
func NewMockUnsafePaymentServiceServer(ctrl *gomock.Controller) *MockUnsafePaymentServiceServer {
	mock := &MockUnsafePaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePaymentServiceServer) EXPECT() *MockUnsafePaymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockUnsafePaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockUnsafePaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockUnsafePaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}
