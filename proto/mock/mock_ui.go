// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/ui_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockUiServiceClient is a mock of UiServiceClient interface.
type MockUiServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUiServiceClientMockRecorder
}

// MockUiServiceClientMockRecorder is the mock recorder for MockUiServiceClient.
type MockUiServiceClientMockRecorder struct {
	mock *MockUiServiceClient
}

// NewMockUiServiceClient creates a new mock instance.
func NewMockUiServiceClient(ctrl *gomock.Controller) *MockUiServiceClient {
	mock := &MockUiServiceClient{ctrl: ctrl}
	mock.recorder = &MockUiServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUiServiceClient) EXPECT() *MockUiServiceClientMockRecorder {
	return m.recorder
}

// TestUiService mocks base method.
func (m *MockUiServiceClient) TestUiService(ctx context.Context, in *pb.TestUiServiceRequest, opts ...grpc.CallOption) (*pb.TestUiServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestUiService", varargs...)
	ret0, _ := ret[0].(*pb.TestUiServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestUiService indicates an expected call of TestUiService.
func (mr *MockUiServiceClientMockRecorder) TestUiService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestUiService", reflect.TypeOf((*MockUiServiceClient)(nil).TestUiService), varargs...)
}

// MockUiServiceServer is a mock of UiServiceServer interface.
type MockUiServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUiServiceServerMockRecorder
}

// MockUiServiceServerMockRecorder is the mock recorder for MockUiServiceServer.
type MockUiServiceServerMockRecorder struct {
	mock *MockUiServiceServer
}

// NewMockUiServiceServer creates a new mock instance.
func NewMockUiServiceServer(ctrl *gomock.Controller) *MockUiServiceServer {
	mock := &MockUiServiceServer{ctrl: ctrl}
	mock.recorder = &MockUiServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUiServiceServer) EXPECT() *MockUiServiceServerMockRecorder {
	return m.recorder
}

// TestUiService mocks base method.
func (m *MockUiServiceServer) TestUiService(arg0 context.Context, arg1 *pb.TestUiServiceRequest) (*pb.TestUiServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestUiService", arg0, arg1)
	ret0, _ := ret[0].(*pb.TestUiServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestUiService indicates an expected call of TestUiService.
func (mr *MockUiServiceServerMockRecorder) TestUiService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestUiService", reflect.TypeOf((*MockUiServiceServer)(nil).TestUiService), arg0, arg1)
}

// mustEmbedUnimplementedUiServiceServer mocks base method.
func (m *MockUiServiceServer) mustEmbedUnimplementedUiServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUiServiceServer")
}

// mustEmbedUnimplementedUiServiceServer indicates an expected call of mustEmbedUnimplementedUiServiceServer.
func (mr *MockUiServiceServerMockRecorder) mustEmbedUnimplementedUiServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUiServiceServer", reflect.TypeOf((*MockUiServiceServer)(nil).mustEmbedUnimplementedUiServiceServer))
}

// MockUnsafeUiServiceServer is a mock of UnsafeUiServiceServer interface.
type MockUnsafeUiServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUiServiceServerMockRecorder
}

// MockUnsafeUiServiceServerMockRecorder is the mock recorder for MockUnsafeUiServiceServer.
type MockUnsafeUiServiceServerMockRecorder struct {
	mock *MockUnsafeUiServiceServer
}

// NewMockUnsafeUiServiceServer creates a new mock instance.
func NewMockUnsafeUiServiceServer(ctrl *gomock.Controller) *MockUnsafeUiServiceServer {
	mock := &MockUnsafeUiServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUiServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUiServiceServer) EXPECT() *MockUnsafeUiServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUiServiceServer mocks base method.
func (m *MockUnsafeUiServiceServer) mustEmbedUnimplementedUiServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUiServiceServer")
}

// mustEmbedUnimplementedUiServiceServer indicates an expected call of mustEmbedUnimplementedUiServiceServer.
func (mr *MockUnsafeUiServiceServerMockRecorder) mustEmbedUnimplementedUiServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUiServiceServer", reflect.TypeOf((*MockUnsafeUiServiceServer)(nil).mustEmbedUnimplementedUiServiceServer))
}
