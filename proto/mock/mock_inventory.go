// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/inventory_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// CreateInventory mocks base method.
func (m *MockInventoryServiceClient) CreateInventory(ctx context.Context, in *pb.CreateInventoryRequest, opts ...grpc.CallOption) (*pb.CreateInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInventory", varargs...)
	ret0, _ := ret[0].(*pb.CreateInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventory indicates an expected call of CreateInventory.
func (mr *MockInventoryServiceClientMockRecorder) CreateInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).CreateInventory), varargs...)
}

// DeleteInventory mocks base method.
func (m *MockInventoryServiceClient) DeleteInventory(ctx context.Context, in *pb.DeleteInventoryRequest, opts ...grpc.CallOption) (*pb.DeleteInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInventory", varargs...)
	ret0, _ := ret[0].(*pb.DeleteInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockInventoryServiceClientMockRecorder) DeleteInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).DeleteInventory), varargs...)
}

// ListInventories mocks base method.
func (m *MockInventoryServiceClient) ListInventories(ctx context.Context, in *pb.ListInventoriesRequest, opts ...grpc.CallOption) (*pb.ListInventoriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInventories", varargs...)
	ret0, _ := ret[0].(*pb.ListInventoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventories indicates an expected call of ListInventories.
func (mr *MockInventoryServiceClientMockRecorder) ListInventories(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventories", reflect.TypeOf((*MockInventoryServiceClient)(nil).ListInventories), varargs...)
}

// ReadInventory mocks base method.
func (m *MockInventoryServiceClient) ReadInventory(ctx context.Context, in *pb.ReadInventoryRequest, opts ...grpc.CallOption) (*pb.ReadInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadInventory", varargs...)
	ret0, _ := ret[0].(*pb.ReadInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInventory indicates an expected call of ReadInventory.
func (mr *MockInventoryServiceClientMockRecorder) ReadInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).ReadInventory), varargs...)
}

// UpdateInventory mocks base method.
func (m *MockInventoryServiceClient) UpdateInventory(ctx context.Context, in *pb.UpdateInventoryRequest, opts ...grpc.CallOption) (*pb.UpdateInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInventory", varargs...)
	ret0, _ := ret[0].(*pb.UpdateInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryServiceClientMockRecorder) UpdateInventory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryServiceClient)(nil).UpdateInventory), varargs...)
}

// MockInventoryServiceServer is a mock of InventoryServiceServer interface.
type MockInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceServerMockRecorder
}

// MockInventoryServiceServerMockRecorder is the mock recorder for MockInventoryServiceServer.
type MockInventoryServiceServerMockRecorder struct {
	mock *MockInventoryServiceServer
}

// NewMockInventoryServiceServer creates a new mock instance.
func NewMockInventoryServiceServer(ctrl *gomock.Controller) *MockInventoryServiceServer {
	mock := &MockInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceServer) EXPECT() *MockInventoryServiceServerMockRecorder {
	return m.recorder
}

// CreateInventory mocks base method.
func (m *MockInventoryServiceServer) CreateInventory(arg0 context.Context, arg1 *pb.CreateInventoryRequest) (*pb.CreateInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventory indicates an expected call of CreateInventory.
func (mr *MockInventoryServiceServerMockRecorder) CreateInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).CreateInventory), arg0, arg1)
}

// DeleteInventory mocks base method.
func (m *MockInventoryServiceServer) DeleteInventory(arg0 context.Context, arg1 *pb.DeleteInventoryRequest) (*pb.DeleteInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockInventoryServiceServerMockRecorder) DeleteInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).DeleteInventory), arg0, arg1)
}

// ListInventories mocks base method.
func (m *MockInventoryServiceServer) ListInventories(arg0 context.Context, arg1 *pb.ListInventoriesRequest) (*pb.ListInventoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventories", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListInventoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventories indicates an expected call of ListInventories.
func (mr *MockInventoryServiceServerMockRecorder) ListInventories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventories", reflect.TypeOf((*MockInventoryServiceServer)(nil).ListInventories), arg0, arg1)
}

// ReadInventory mocks base method.
func (m *MockInventoryServiceServer) ReadInventory(arg0 context.Context, arg1 *pb.ReadInventoryRequest) (*pb.ReadInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.ReadInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInventory indicates an expected call of ReadInventory.
func (mr *MockInventoryServiceServerMockRecorder) ReadInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).ReadInventory), arg0, arg1)
}

// UpdateInventory mocks base method.
func (m *MockInventoryServiceServer) UpdateInventory(arg0 context.Context, arg1 *pb.UpdateInventoryRequest) (*pb.UpdateInventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInventory indicates an expected call of UpdateInventory.
func (mr *MockInventoryServiceServerMockRecorder) UpdateInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInventory", reflect.TypeOf((*MockInventoryServiceServer)(nil).UpdateInventory), arg0, arg1)
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}

// MockUnsafeInventoryServiceServer is a mock of UnsafeInventoryServiceServer interface.
type MockUnsafeInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInventoryServiceServerMockRecorder
}

// MockUnsafeInventoryServiceServerMockRecorder is the mock recorder for MockUnsafeInventoryServiceServer.
type MockUnsafeInventoryServiceServerMockRecorder struct {
	mock *MockUnsafeInventoryServiceServer
}

// NewMockUnsafeInventoryServiceServer creates a new mock instance.
func NewMockUnsafeInventoryServiceServer(ctrl *gomock.Controller) *MockUnsafeInventoryServiceServer {
	mock := &MockUnsafeInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInventoryServiceServer) EXPECT() *MockUnsafeInventoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedInventoryServiceServer mocks base method.
func (m *MockUnsafeInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedInventoryServiceServer")
}

// mustEmbedUnimplementedInventoryServiceServer indicates an expected call of mustEmbedUnimplementedInventoryServiceServer.
func (mr *MockUnsafeInventoryServiceServerMockRecorder) mustEmbedUnimplementedInventoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedInventoryServiceServer", reflect.TypeOf((*MockUnsafeInventoryServiceServer)(nil).mustEmbedUnimplementedInventoryServiceServer))
}
