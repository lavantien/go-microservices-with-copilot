// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/cart_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockCartServiceClient is a mock of CartServiceClient interface.
type MockCartServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceClientMockRecorder
}

// MockCartServiceClientMockRecorder is the mock recorder for MockCartServiceClient.
type MockCartServiceClientMockRecorder struct {
	mock *MockCartServiceClient
}

// NewMockCartServiceClient creates a new mock instance.
func NewMockCartServiceClient(ctrl *gomock.Controller) *MockCartServiceClient {
	mock := &MockCartServiceClient{ctrl: ctrl}
	mock.recorder = &MockCartServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceClient) EXPECT() *MockCartServiceClientMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartServiceClient) AddToCart(ctx context.Context, in *pb.AddToCartRequest, opts ...grpc.CallOption) (*pb.AddToCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToCart", varargs...)
	ret0, _ := ret[0].(*pb.AddToCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartServiceClientMockRecorder) AddToCart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartServiceClient)(nil).AddToCart), varargs...)
}

// GetCart mocks base method.
func (m *MockCartServiceClient) GetCart(ctx context.Context, in *pb.GetCartRequest, opts ...grpc.CallOption) (*pb.GetCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCart", varargs...)
	ret0, _ := ret[0].(*pb.GetCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartServiceClientMockRecorder) GetCart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartServiceClient)(nil).GetCart), varargs...)
}

// ListCartsOfUser mocks base method.
func (m *MockCartServiceClient) ListCartsOfUser(ctx context.Context, in *pb.ListCartsOfUserRequest, opts ...grpc.CallOption) (*pb.ListCartsOfUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCartsOfUser", varargs...)
	ret0, _ := ret[0].(*pb.ListCartsOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartsOfUser indicates an expected call of ListCartsOfUser.
func (mr *MockCartServiceClientMockRecorder) ListCartsOfUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartsOfUser", reflect.TypeOf((*MockCartServiceClient)(nil).ListCartsOfUser), varargs...)
}

// RemoveFromCart mocks base method.
func (m *MockCartServiceClient) RemoveFromCart(ctx context.Context, in *pb.RemoveFromCartRequest, opts ...grpc.CallOption) (*pb.RemoveFromCartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFromCart", varargs...)
	ret0, _ := ret[0].(*pb.RemoveFromCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartServiceClientMockRecorder) RemoveFromCart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartServiceClient)(nil).RemoveFromCart), varargs...)
}

// MockCartServiceServer is a mock of CartServiceServer interface.
type MockCartServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceServerMockRecorder
}

// MockCartServiceServerMockRecorder is the mock recorder for MockCartServiceServer.
type MockCartServiceServerMockRecorder struct {
	mock *MockCartServiceServer
}

// NewMockCartServiceServer creates a new mock instance.
func NewMockCartServiceServer(ctrl *gomock.Controller) *MockCartServiceServer {
	mock := &MockCartServiceServer{ctrl: ctrl}
	mock.recorder = &MockCartServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceServer) EXPECT() *MockCartServiceServerMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartServiceServer) AddToCart(arg0 context.Context, arg1 *pb.AddToCartRequest) (*pb.AddToCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", arg0, arg1)
	ret0, _ := ret[0].(*pb.AddToCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartServiceServerMockRecorder) AddToCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartServiceServer)(nil).AddToCart), arg0, arg1)
}

// GetCart mocks base method.
func (m *MockCartServiceServer) GetCart(arg0 context.Context, arg1 *pb.GetCartRequest) (*pb.GetCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartServiceServerMockRecorder) GetCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartServiceServer)(nil).GetCart), arg0, arg1)
}

// ListCartsOfUser mocks base method.
func (m *MockCartServiceServer) ListCartsOfUser(arg0 context.Context, arg1 *pb.ListCartsOfUserRequest) (*pb.ListCartsOfUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartsOfUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ListCartsOfUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartsOfUser indicates an expected call of ListCartsOfUser.
func (mr *MockCartServiceServerMockRecorder) ListCartsOfUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartsOfUser", reflect.TypeOf((*MockCartServiceServer)(nil).ListCartsOfUser), arg0, arg1)
}

// RemoveFromCart mocks base method.
func (m *MockCartServiceServer) RemoveFromCart(arg0 context.Context, arg1 *pb.RemoveFromCartRequest) (*pb.RemoveFromCartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", arg0, arg1)
	ret0, _ := ret[0].(*pb.RemoveFromCartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartServiceServerMockRecorder) RemoveFromCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartServiceServer)(nil).RemoveFromCart), arg0, arg1)
}

// mustEmbedUnimplementedCartServiceServer mocks base method.
func (m *MockCartServiceServer) mustEmbedUnimplementedCartServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCartServiceServer")
}

// mustEmbedUnimplementedCartServiceServer indicates an expected call of mustEmbedUnimplementedCartServiceServer.
func (mr *MockCartServiceServerMockRecorder) mustEmbedUnimplementedCartServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCartServiceServer", reflect.TypeOf((*MockCartServiceServer)(nil).mustEmbedUnimplementedCartServiceServer))
}

// MockUnsafeCartServiceServer is a mock of UnsafeCartServiceServer interface.
type MockUnsafeCartServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCartServiceServerMockRecorder
}

// MockUnsafeCartServiceServerMockRecorder is the mock recorder for MockUnsafeCartServiceServer.
type MockUnsafeCartServiceServerMockRecorder struct {
	mock *MockUnsafeCartServiceServer
}

// NewMockUnsafeCartServiceServer creates a new mock instance.
func NewMockUnsafeCartServiceServer(ctrl *gomock.Controller) *MockUnsafeCartServiceServer {
	mock := &MockUnsafeCartServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCartServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCartServiceServer) EXPECT() *MockUnsafeCartServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCartServiceServer mocks base method.
func (m *MockUnsafeCartServiceServer) mustEmbedUnimplementedCartServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCartServiceServer")
}

// mustEmbedUnimplementedCartServiceServer indicates an expected call of mustEmbedUnimplementedCartServiceServer.
func (mr *MockUnsafeCartServiceServerMockRecorder) mustEmbedUnimplementedCartServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCartServiceServer", reflect.TypeOf((*MockUnsafeCartServiceServer)(nil).mustEmbedUnimplementedCartServiceServer))
}
