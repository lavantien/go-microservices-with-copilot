// Code generated by MockGen. DO NOT EDIT.
// Source: ./pb/mobile_grpc.pb.go

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/lavantien/go-microservices-with-copilot/proto/pb"
	grpc "google.golang.org/grpc"
)

// MockMobileServiceClient is a mock of MobileServiceClient interface.
type MockMobileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMobileServiceClientMockRecorder
}

// MockMobileServiceClientMockRecorder is the mock recorder for MockMobileServiceClient.
type MockMobileServiceClientMockRecorder struct {
	mock *MockMobileServiceClient
}

// NewMockMobileServiceClient creates a new mock instance.
func NewMockMobileServiceClient(ctrl *gomock.Controller) *MockMobileServiceClient {
	mock := &MockMobileServiceClient{ctrl: ctrl}
	mock.recorder = &MockMobileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobileServiceClient) EXPECT() *MockMobileServiceClientMockRecorder {
	return m.recorder
}

// TestMobileService mocks base method.
func (m *MockMobileServiceClient) TestMobileService(ctx context.Context, in *pb.TestMobileServiceRequest, opts ...grpc.CallOption) (*pb.TestMobileServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestMobileService", varargs...)
	ret0, _ := ret[0].(*pb.TestMobileServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMobileService indicates an expected call of TestMobileService.
func (mr *MockMobileServiceClientMockRecorder) TestMobileService(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMobileService", reflect.TypeOf((*MockMobileServiceClient)(nil).TestMobileService), varargs...)
}

// MockMobileServiceServer is a mock of MobileServiceServer interface.
type MockMobileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMobileServiceServerMockRecorder
}

// MockMobileServiceServerMockRecorder is the mock recorder for MockMobileServiceServer.
type MockMobileServiceServerMockRecorder struct {
	mock *MockMobileServiceServer
}

// NewMockMobileServiceServer creates a new mock instance.
func NewMockMobileServiceServer(ctrl *gomock.Controller) *MockMobileServiceServer {
	mock := &MockMobileServiceServer{ctrl: ctrl}
	mock.recorder = &MockMobileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMobileServiceServer) EXPECT() *MockMobileServiceServerMockRecorder {
	return m.recorder
}

// TestMobileService mocks base method.
func (m *MockMobileServiceServer) TestMobileService(arg0 context.Context, arg1 *pb.TestMobileServiceRequest) (*pb.TestMobileServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMobileService", arg0, arg1)
	ret0, _ := ret[0].(*pb.TestMobileServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMobileService indicates an expected call of TestMobileService.
func (mr *MockMobileServiceServerMockRecorder) TestMobileService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMobileService", reflect.TypeOf((*MockMobileServiceServer)(nil).TestMobileService), arg0, arg1)
}

// mustEmbedUnimplementedMobileServiceServer mocks base method.
func (m *MockMobileServiceServer) mustEmbedUnimplementedMobileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMobileServiceServer")
}

// mustEmbedUnimplementedMobileServiceServer indicates an expected call of mustEmbedUnimplementedMobileServiceServer.
func (mr *MockMobileServiceServerMockRecorder) mustEmbedUnimplementedMobileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMobileServiceServer", reflect.TypeOf((*MockMobileServiceServer)(nil).mustEmbedUnimplementedMobileServiceServer))
}

// MockUnsafeMobileServiceServer is a mock of UnsafeMobileServiceServer interface.
type MockUnsafeMobileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMobileServiceServerMockRecorder
}

// MockUnsafeMobileServiceServerMockRecorder is the mock recorder for MockUnsafeMobileServiceServer.
type MockUnsafeMobileServiceServerMockRecorder struct {
	mock *MockUnsafeMobileServiceServer
}

// NewMockUnsafeMobileServiceServer creates a new mock instance.
func NewMockUnsafeMobileServiceServer(ctrl *gomock.Controller) *MockUnsafeMobileServiceServer {
	mock := &MockUnsafeMobileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMobileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMobileServiceServer) EXPECT() *MockUnsafeMobileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMobileServiceServer mocks base method.
func (m *MockUnsafeMobileServiceServer) mustEmbedUnimplementedMobileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMobileServiceServer")
}

// mustEmbedUnimplementedMobileServiceServer indicates an expected call of mustEmbedUnimplementedMobileServiceServer.
func (mr *MockUnsafeMobileServiceServerMockRecorder) mustEmbedUnimplementedMobileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMobileServiceServer", reflect.TypeOf((*MockUnsafeMobileServiceServer)(nil).mustEmbedUnimplementedMobileServiceServer))
}
